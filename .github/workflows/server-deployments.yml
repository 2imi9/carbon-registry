name: Deploy Services
on:
  push:
    branches:
      - develop
      - main
    paths:
      - lambda/**
      - libs/**
      - web/**
    
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      changes: ${{steps.filter.outputs.workflows}}
    steps:
      - uses: actions/checkout@v2
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            web:
              - 'web/**'
      - name: check for front-end changes
        if: steps.changes.outputs.web == 'true'
        run: echo "There are changes in the front-end"

      - name: check for back-end end changes
        if: steps.changes.outputs.web == 'false'
        run: echo "There are changes in the back-end"
  check_dependency_change:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.changes == 'false'
    # Declare outputs for next jobs
    outputs:
      deps_changed: ${{ steps.check_file_changed.outputs.deps_changed }}
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - id: check_file_changed
      run: |
        current_commit=`git log -n 1 --pretty=format:%H`
        echo $current_commit
        last_deps_mod_commit=`git log -n 1 --pretty=format:%H -- ./lambda/services/package.json`
        last_libs_mod_commit=`git log -n 1 --pretty=format:%H -- ./libs/`
        echo $last_deps_mod_commit
        echo $last_libs_mod_commit
        if [ "${current_commit}" = "${last_deps_mod_commit}" ] || [ "${current_commit}" = "${last_libs_mod_commit}" ]; then
          echo "deps_changed=True" >> $GITHUB_OUTPUT
        else
          echo "deps_changed=False" >> $GITHUB_OUTPUT
        fi
  layer:
    name: layer
    runs-on: ubuntu-latest
    needs: check_dependency_change
    steps:
      - name: check_file_changed
        run: |
          echo ${{needs.check_dependency_change.outputs.deps_changed}}
          echo ${{needs.check_dependency_change.outputs}}
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build Serial Generator Package
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
        working-directory: ./libs/serial-number-gen
        run: yarn run build
      - name: Build Carbon Credit Package
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
        working-directory: ./libs/carbon-credit-calculator
        run: yarn run build
      - name: Copy package.json
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
        working-directory: ./lambda/layer/dependency_layer
        run: cp ../../services/package.json ./ && cp ../../services/yarn.lock ./ && cp -r ../../../libs ../../
      - name: Install Dependency
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
        working-directory: ./lambda/layer/dependency_layer
        run: yarn install --production --frozen-lockfile
      # - name: Copy Dependency
      #   if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' }}
      #   working-directory: ./lambda/layer
      #   run: |
      #     cp -r node_modules ./dependency_layer
      #     ls
      - name: serverless deploy develop
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' && github.ref == 'refs/heads/develop'}}
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./lambda/layer && serverless deploy --stage dev"
          entrypoint: /bin/sh
      - name: serverless deploy main
        if: ${{ needs.check_dependency_change.outputs.deps_changed == 'True' && github.ref == 'refs/heads/main'}}
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./lambda/layer && serverless deploy --stage prod"
          entrypoint: /bin/sh
  deploy:
    name: deploy
    runs-on: ubuntu-latest
    needs: [layer]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Dependency
        working-directory: ./lambda/services
        run: yarn install --frozen-lockfile
      - name: version
        run: |
          echo "ARN1=$(aws lambda list-layer-versions --layer-name service-dependencies-1 --region us-east-1 --query 'LayerVersions[0].LayerVersionArn')" >> $GITHUB_OUTPUT
          echo "ARN2=$(aws lambda list-layer-versions --layer-name service-dependencies-2 --region us-east-1 --query 'LayerVersions[0].LayerVersionArn')" >> $GITHUB_OUTPUT
        id: layerArn
      - name: Build Serial Generator Package
        working-directory: ./libs/serial-number-gen
        run: yarn run build
      - name: Build Carbon Credit Package
        working-directory: ./libs/carbon-credit-calculator
        run: yarn run build
      - name: serverless deploy develop
        if: github.ref == 'refs/heads/develop'
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./lambda/services && serverless deploy --stage dev --param='depLayerArn1=${{ steps.layerArn.outputs.ARN1 }}' --param='depLayerArn2=${{ steps.layerArn.outputs.ARN2 }}'"
          entrypoint: /bin/sh
      - name: serverless deploy main
        if: github.ref == 'refs/heads/main'
        uses: serverless/github-action@v3.1
        with:
          args: -c "cd ./lambda/services && serverless deploy --stage prod"
          entrypoint: /bin/sh
  deploy_front_end:
    runs-on: ubuntu-latest
    needs: path-filter
    if: needs.path-filter.outputs.changes == 'true'
    env:
      REACT_APP_BACKEND: https://ck5kt5uaw1.execute-api.us-east-1.amazonaws.com/dev/api/national/docs#/Auth/AuthController_login
    steps:
      - uses: actions/checkout@v2
      - name: Cache modules
        uses: actions/cache@v1
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-yarn-
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: CI=false yarn
      - name: Build
        run: CI=false yarn build
      - name: Deploy
        run: aws s3 sync ./build s3://carbon-www-dev
